/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(advanced_receiver_sb_cc.h)                                 */
/* BINDTOOL_HEADER_FILE_HASH(cc0931eca8cd3a33d81878f4d4ca323a)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gfdm/advanced_receiver_sb_cc.h>
// pydoc.h is automatically generated in the build directory
#include <advanced_receiver_sb_cc_pydoc.h>

void bind_advanced_receiver_sb_cc(py::module& m)
{

    using advanced_receiver_sb_cc = ::gr::gfdm::advanced_receiver_sb_cc;


    py::class_<advanced_receiver_sb_cc,
               gr::sync_block,
               gr::block,
               gr::basic_block,
               std::shared_ptr<advanced_receiver_sb_cc>>(
        m, "advanced_receiver_sb_cc", D(advanced_receiver_sb_cc))

        .def(py::init(&advanced_receiver_sb_cc::make),
             py::arg("timeslots"),
             py::arg("subcarriers"),
             py::arg("overlap"),
             py::arg("ic_iter"),
             py::arg("frequency_taps"),
             py::arg("constellation"),
             py::arg("subcarrier_map"),
             py::arg("do_phase_compensation"),
             D(advanced_receiver_sb_cc, make))


        .def("set_phase_compensation",
             &advanced_receiver_sb_cc::set_phase_compensation,
             py::arg("do_phase_compensation"),
             D(advanced_receiver_sb_cc, set_phase_compensation))


        .def("get_phase_compensation",
             &advanced_receiver_sb_cc::get_phase_compensation,
             D(advanced_receiver_sb_cc, get_phase_compensation))


        .def("set_ic",
             &advanced_receiver_sb_cc::set_ic,
             py::arg("ic_iter"),
             D(advanced_receiver_sb_cc, set_ic))


        .def("get_ic",
             &advanced_receiver_sb_cc::get_ic,
             D(advanced_receiver_sb_cc, get_ic))

        ;
}
